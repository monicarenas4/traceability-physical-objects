(*secrecy checks for the semi-honest RS scenario*)
(*channels*)
free ch: channel.

(*types*)
type sskey.
type pskey.
type embFeature.
type id.
type header.

free authHeader: header.
free enrolHeader: header.
table enrolTable(id, id, bitstring, bitstring).
table authorisedVendors(id).
const YES,NO: bitstring.

event serverChallenged.
event serverVerified.
event enrolRequested(id, id, bitstring, bitstring).
event enrolVerified(id, id, bitstring, bitstring).
event recordSent(id, id, bitstring, bitstring).
event recordVerified(id, id, bitstring, bitstring).
event resultVerified(id, id).
event honestVendors(id, bitstring).


(*Note that to check the secrecy of csr (or w) we cannot directly use "query secret csr" (or w) because the attacker is allowed to be a vendor and 
so proverif will find a trivial false attack where these elements belong to the attacker's process. So instead, we check the secrecy of these elements just in
the non-attacker processes by capturing the "honestVendors" event. Indeed, this technique excludes the Vendor process run by the attacker from secrecy check*)
query vID:id, csr:bitstring; attacker(csr) && event(honestVendors(vID, csr)). (*it is the same as "query secret csrR."*)

(*It is clear that if the above query holds then these two following secrecy queries will be satisfied.*)
query vID:id, csr:bitstring; attacker(imgProcess(csr)) && event(honestVendors(vID, csr)).

query secret csrF.

(*functions*)
fun pk(sskey) : pskey.
fun sign(bitstring, sskey) : bitstring.
fun imgProcess(bitstring) : embFeature.
fun genR(embFeature) : bitstring.
fun genP(embFeature) : bitstring.
fun bitstringToID(bitstring):id [typeConverter].

reduc forall m:bitstring, ssk:sskey; checksign(sign(m,ssk), pk(ssk)) = m.
reduc forall m:bitstring, ssk:sskey; getmess(sign(m, ssk)) = m.
reduc forall w:embFeature; rep(w, genP(w)) = genR(w).
reduc forall s: bitstring; getSeal(imgProcess(s)) = s.

(*--------------Auth Device Process--------------*)
let AD (pchV:channel, pchU:channel, ADskey:sskey, ASpkey: pskey) =

    (
        (*Enrollment Phase*)
        in(pchV, x:bitstring);
        (
            let (vID:id, csrAD:bitstring) = x in
            get authorisedVendors(=vID) in
            new nED: bitstring;
            out(ch, (enrolHeader, vID, nED));
            in(ch, (mRS:bitstring, sRS:bitstring));
            let (=mRS) = checksign(sRS, ASpkey) in
            let (=vID, csrID:id, =nED, nRS:bitstring) = mRS in
            event serverVerified;
            let w = imgProcess(csrAD) in
            let R = genR(w) in 
            let P = genP(w) in
            let mED = (csrID, P, R, nED, nRS) in
            let sED = sign((mED), ADskey) in
            event enrolRequested(vID, csrID, P, R);
            out(ch, (mED, sED));
            in(ch, (mRS':bitstring, sRS':bitstring));
            let (=mRS') = checksign(sRS', ASpkey) in
            let (res:bitstring, =vID, =csrID, =nED, =nRS) = mRS' in
            if (res = YES) then
            (
                event resultVerified(vID, csrID);
                out(pchV, YES)
            )
            else
            (
                out(pchV, NO)
            )
        )
    )
    |
    (
        (*Authentication Phase*)
        in(pchU, x:bitstring);
        (
            let (csrID':id, vID':id, csr':bitstring) = x in
            new nED':bitstring;
            out(ch, (authHeader , csrID', nED'));
            in(ch, (mCSR:bitstring, sCSR:bitstring));
            let (=mCSR) = checksign(sCSR, ASpkey) in
            let (=vID', =csrID', P':bitstring, R'':bitstring, =nED', nRS':bitstring) = mCSR in
            let w' = imgProcess(csr') in
            let R' = rep(w',P') in
            if (R' = R'') then
            (
                event recordVerified(vID', csrID', P', R');
                out(pchU, YES)
            )
            else
            (
                out(pchU,  NO)
            )
        )
    ).

(*---------------Auth Server Process-------------*)
let AS (ASskey:sskey, ADpkey:pskey) =

    in(ch, (msgHeader:header, x:bitstring));
    if (msgHeader = enrolHeader) then
    (
        (*Enrollment Phase*)
        let (vID:id, nED:bitstring) = x in
        in(ch, nRS:bitstring);
        in(ch, csrID: id);
        let mRS = (vID, csrID, nED, nRS) in
        let sRS = sign((mRS), ASskey) in
        event serverChallenged;
        out(ch, (mRS, sRS));
        in(ch, (mED:bitstring, sED:bitstring));
        let (=mED) = checksign(sED, ADpkey) in
        (
            let (=csrID, P:bitstring, R:bitstring, =nED, =nRS) = mED in
            insert enrolTable(vID, csrID, P, R);
            let mRS' = (YES, vID, csrID, nED, nRS) in
            let sRS' = sign((mRS'), ASskey) in
            event enrolVerified(vID, csrID, P, R);
            out(ch, (mRS', sRS'))
        )
        else
        (
            let mRS' = (NO, vID, csrID, nED, nRS) in
            let sRS' = sign((mRS'), ASskey) in
            out(ch, (mRS', sRS'))
        )
    )
 
    else if (msgHeader = authHeader) then
    (
        (*Authentication Phase*)
        let (csrID':id, nED':bitstring) = x in
        in(ch, nRS':bitstring);
        get enrolTable(vID', =csrID', P', R') in
        let mCSR = (vID', csrID', P', R', nED', nRS') in
        let sCSR = sign((mCSR), ASskey) in

        event recordSent(vID', csrID', P', R');
        out(ch, (mCSR, sCSR))
    )
    else 0.

(*----------Vendor Process-------------*)
let Vendor (pchV:channel, vID:id, csrV:bitstring) =
    (*Enrollment Request*)
    out(pchV, (vID, csrV)).

(*-----------------User Process------------------*)
let User (pchU:channel, csrU:bitstring) =
    (*Authentication Request*)
    (*The attacker starts the authentication phase by choosing a csrID and a vID*)
    in(ch, (csrID:id, vID:id));
    out(pchU, (csrID, vID, csrU)).
(*---------------------Main----------------------*)
process

new pchU:channel;
new pchV:channel;
new ADskey: sskey;
let ADpkey = pk(ADskey) in out(ch, ADpkey);
new ASskey: sskey;
let ASpkey = pk(ASskey) in out(ch, (ASskey, ASpkey));

(*User and legitimate Vendor processes run by the attacker*)
(in(ch, (csrA:bitstring)); in(ch, (vID:id, csrV:bitstring)); insert authorisedVendors(vID); User(pchU, csrA) | Vendor(pchV, vID, csrV)) |
(*unauthorised Vednor process run by the attacker*)
(in(ch, (csrA:bitstring)); in(ch, (vID:id, csrV:bitstring)); Vendor(pchV, vID, csrV)) |
(*same csrID for enrollment and authentication*)
!(
    new vID:id; new csrF:bitstring; new csrR:bitstring; insert authorisedVendors(vID); event honestVendors(vID, csrR); 
    Vendor(pchV, vID, csrR) | (*Vendor process*)
    User(pchU, csrR) | (*User authenticates an enrolled artifact*)
    User(pchU, csrF)   (*User authenticates a not-enrolled artifact*)
)  
| (!AD(pchV, pchU, ADskey, ASpkey)) 
| !AS(ASskey, ADpkey)
 